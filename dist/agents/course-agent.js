import OpenAI from "openai";
import fs from "fs/promises";
import path from "path";
const client = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
    timeout: 2 * 60 * 1000, // 2 minutos
});
/**
 * Agente especializado em recomenda√ß√£o de cursos
 * Respons√°vel por sugerir trilhas de cursos do Senac Maranh√£o
 */
export class CourseAgent {
    /**
     * Carrega cursos da programa√ß√£o atual do Senac (PROGRAMA√á√ÉO- out-nov-dez-final.json)
     */
    async loadCurrentProgramCourses() {
        try {
            let data;
            try {
                // Primeiro, tenta o arquivo no diret√≥rio data
                const dataPath = path.join(process.cwd(), "data", "senac-courses.json");
                console.log("üîç Tentando caminho data:", dataPath);
                data = await fs.readFile(dataPath, "utf-8");
            }
            catch (dataError) {
                try {
                    // Segundo, tenta o caminho relativo
                    const relativePath = path.join(process.cwd(), "PROGRAMA√á√ÉO- out-nov-dez-final.json");
                    console.log("üîç Tentando caminho relativo:", relativePath);
                    data = await fs.readFile(relativePath, "utf-8");
                }
                catch (relativeError) {
                    // Se falhar, tenta o caminho absoluto
                    const absolutePath = "C:\\Users\\freed\\OneDrive\\Documentos\\app-teste-vocacional-ia\\PROGRAMA√á√ÉO- out-nov-dez-final.json";
                    console.log("üîç Tentando caminho absoluto:", absolutePath);
                    data = await fs.readFile(absolutePath, "utf-8");
                }
            }
            const courses = JSON.parse(data);
            // Filtrar cursos v√°lidos (que t√™m nome da turma)
            const validCourses = courses.filter(course => course.Turma &&
                course.Turma.trim() !== "" &&
                course["C. H."] &&
                course["C. H."] > 0);
            console.log(`‚úÖ Cursos da programa√ß√£o atual carregados: ${validCourses.length} cursos v√°lidos`);
            console.log("üìã Cursos carregados:", validCourses.map(c => c.Turma).join(", "));
            return validCourses;
        }
        catch (error) {
            console.warn("‚ö†Ô∏è Arquivo de programa√ß√£o atual n√£o encontrado, usando apenas cursos gen√©ricos:", error);
            return [];
        }
    }
    async loadAvailableCourses() {
        try {
            const coursesPath = path.join(process.cwd(), "data", "courses.json");
            const data = await fs.readFile(coursesPath, "utf-8");
            const courses = JSON.parse(data);
            return courses.filter(course => course.ativo); // Apenas cursos ativos
        }
        catch (error) {
            console.error("Erro ao carregar cursos do sistema administrativo:", error);
            return [];
        }
    }
    async generateSystemPrompt() {
        const currentProgramCourses = await this.loadCurrentProgramCourses();
        const genericCourses = await this.loadAvailableCourses();
        let coursesText = "CURSOS DISPON√çVEIS NO SENAC MARANH√ÉO:\n\n";
        // PRIORIDADE 1: Cursos da programa√ß√£o atual (out-nov-dez)
        if (currentProgramCourses.length > 0) {
            coursesText += "=== CURSOS DA PROGRAMA√á√ÉO ATUAL (PRIORIDADE M√ÅXIMA) ===\n";
            coursesText += "Estes cursos est√£o sendo oferecidos AGORA (out-nov-dez 2024) e DEVEM SER PRIORIZADOS:\n\n";
            // Agrupar cursos atuais por √°rea estimada
            const currentCoursesByArea = this.groupCurrentCoursesByArea(currentProgramCourses);
            for (const [area, areaCourses] of Object.entries(currentCoursesByArea)) {
                coursesText += `${area.toUpperCase()}:\n`;
                areaCourses.forEach(course => {
                    coursesText += `- ${course.Turma} (${course["C. H."]}h) [DISPON√çVEL AGORA]\n`;
                });
                coursesText += '\n';
            }
            coursesText += "=== CURSOS GEN√âRICOS (usar APENAS se n√£o houver correspond√™ncia acima) ===\n";
        }
        else {
            coursesText += "ATEN√á√ÉO: Cursos da programa√ß√£o atual n√£o foram carregados. Usando apenas cursos gen√©ricos.\n\n";
        }
        // PRIORIDADE 2: Cursos gen√©ricos do sistema administrativo
        const coursesByArea = genericCourses.reduce((acc, course) => {
            if (!acc[course.area]) {
                acc[course.area] = [];
            }
            acc[course.area].push(course);
            return acc;
        }, {});
        for (const [area, areaCourses] of Object.entries(coursesByArea)) {
            coursesText += `${area.toUpperCase()}:\n`;
            areaCourses.forEach(course => {
                coursesText += `- ${course.nome}`;
                if (course.nivel && course.nivel !== 'basico') {
                    coursesText += ` (${course.nivel})`;
                }
                if (course.duracao) {
                    coursesText += ` - ${course.duracao}`;
                }
                coursesText += '\n';
            });
            coursesText += '\n';
        }
        return `
    Voc√™ √© um consultor educacional especialista nos cursos do Senac Maranh√£o.
    Sua fun√ß√£o √© recomendar trilhas de cursos personalizadas baseadas no perfil vocacional.
    
    ${coursesText}
    
    INSTRU√á√ïES IMPORTANTES:
    1. SEMPRE PRIORIZE os cursos da "PROGRAMA√á√ÉO ATUAL" - estes est√£o sendo oferecidos AGORA (out-nov-dez 2024)
    2. Use cursos gen√©ricos APENAS quando n√£o houver correspond√™ncia na programa√ß√£o atual
    3. SEMPRE RECOMENDE PELO MENOS 2-3 CURSOS - nunca deixe o usu√°rio sem recomenda√ß√µes
    4. Se n√£o houver cursos da programa√ß√£o atual compat√≠veis, use os cursos gen√©ricos como alternativa
    5. Analise o perfil vocacional e as prefer√™ncias do usu√°rio
    6. Recomende cursos que se alinhem com seus interesses e objetivos
    7. Considere a escolaridade, experi√™ncia e disponibilidade
    8. Sugira uma progress√£o l√≥gica de cursos (b√°sico ‚Üí intermedi√°rio ‚Üí avan√ßado)
    9. Explique por que cada curso √© adequado para o perfil
    10. Mencione oportunidades de carreira e mercado de trabalho
    11. Seja espec√≠fico sobre os benef√≠cios de cada curso
    12. Considere a carga hor√°ria dos cursos atuais
    13. SEMPRE marque "programacao_atual": true para cursos da programa√ß√£o atual
    14. SEMPRE marque "programacao_atual": false para cursos gen√©ricos
    
    ESTRAT√âGIA DE FALLBACK:
    - Se n√£o encontrar cursos da programa√ß√£o atual compat√≠veis com o perfil exato, procure por cursos relacionados
    - Se ainda assim n√£o encontrar, use cursos gen√©ricos da mesma √°rea de interesse
    - Como √∫ltimo recurso, recomende cursos gen√©ricos que desenvolvam habilidades transfer√≠veis
    - NUNCA retorne uma resposta vazia - sempre forne√ßa pelo menos 2 recomenda√ß√µes
    
    FORMATO DE RESPOSTA:
    - Liste 3-5 cursos recomendados (priorizando os da programa√ß√£o atual)
    - Para cada curso, explique: por que √© adequado, benef√≠cios, oportunidades
    - Sugira uma ordem de prioridade
    - Inclua dicas de carreira relacionadas
    
    Retorne sempre um JSON v√°lido com a estrutura:
    {
      "trilhas_recomendadas": [
        {
          "area": "nome_da_area",
          "compatibilidade": numero_0_a_100,
          "cursos": [
            {
              "nome": "nome_do_curso",
              "tipo": "tecnico|livre|qualificacao",
              "duracao": "tempo_estimado",
              "nivel": "basico|intermediario|avancado",
              "justificativa": "por_que_recomendado",
              "beneficios": ["beneficio1", "beneficio2"],
              "oportunidades": ["carreira1", "carreira2"],
              "programacao_atual": true_ou_false
            }
          ]
        }
      ],
      "observacoes": "comentarios_adicionais"
    }
    `;
    }
    /**
     * Agrupa cursos atuais por √°rea estimada baseada no nome
     */
    groupCurrentCoursesByArea(courses) {
        const grouped = {};
        courses.forEach(course => {
            const courseName = course.Turma.toLowerCase();
            let area = "Outros";
            // Classifica√ß√£o por palavras-chave no nome do curso
            if (courseName.includes("administrativo") || courseName.includes("financeiro")) {
                area = "Gest√£o e Neg√≥cios";
            }
            else if (courseName.includes("sa√∫de") || courseName.includes("cuidador") || courseName.includes("cirurg")) {
                area = "Sa√∫de";
            }
            else if (courseName.includes("barbeiro") || courseName.includes("depila√ß√£o") || courseName.includes("maquiagem") || courseName.includes("penteado")) {
                area = "Beleza e Est√©tica";
            }
            else if (courseName.includes("costur") || courseName.includes("modelagem")) {
                area = "Moda";
            }
            else if (courseName.includes("fotografia") || courseName.includes("orat√≥ria")) {
                area = "Comunica√ß√£o";
            }
            else if (courseName.includes("banco de dados") || courseName.includes("tecnologia") || courseName.includes("autocad") || courseName.includes("revit") || courseName.includes("power bi") || courseName.includes("excel") || courseName.includes("adobe") || courseName.includes("python") || courseName.includes("inform√°tica") || courseName.includes("chatgpt") || courseName.includes("redes sociais") || courseName.includes("intelig√™ncia artificial")) {
                area = "Tecnologia da Informa√ß√£o";
            }
            else if (courseName.includes("hamb√∫rguer") || courseName.includes("caf√©")) {
                area = "Gastronomia";
            }
            if (!grouped[area]) {
                grouped[area] = [];
            }
            grouped[area].push(course);
        });
        return grouped;
    }
    /**
     * Recomenda cursos baseado no perfil vocacional
     */
    async recommendCourses(vocationalProfile, userRequest) {
        const systemPrompt = await this.generateSystemPrompt();
        const diretrizes = await this.loadGuidelines();
        const userPrompt = this.buildRecommendationPrompt(vocationalProfile, userRequest);
        const response = await client.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
                { role: "system", content: systemPrompt },
                { role: "system", content: `Diretrizes institucionais: ${diretrizes}` },
                { role: "user", content: userPrompt }
            ],
            temperature: 0.4,
            max_tokens: 2500,
        });
        const content = response.choices[0]?.message?.content;
        if (!content) {
            throw new Error("Falha ao gerar recomenda√ß√µes de cursos");
        }
        try {
            // Log da resposta para debug
            console.log('üîç [CourseAgent] Resposta da OpenAI:', content);
            // Tentar extrair JSON se estiver dentro de markdown
            let jsonContent = content;
            const jsonMatch = content.match(/```json\n([\s\S]*?)\n```/);
            if (jsonMatch && jsonMatch[1]) {
                jsonContent = jsonMatch[1];
            }
            return JSON.parse(jsonContent);
        }
        catch (error) {
            console.error('‚ùå [CourseAgent] Erro ao parsear JSON:', error);
            console.error('üìÑ [CourseAgent] Conte√∫do recebido:', content);
            throw new Error("Resposta inv√°lida do agente de cursos");
        }
    }
    /**
     * Recomenda cursos para uma √°rea espec√≠fica
     */
    async recommendCoursesForArea(area, userProfile, maxCourses = 5) {
        const currentProgramCourses = await this.loadCurrentProgramCourses();
        const systemPrompt = await this.generateSystemPrompt();
        const prompt = `
      Recomende at√© ${maxCourses} cursos da √°rea de ${area} para o usu√°rio:
      
      PERFIL DO USU√ÅRIO:
      ${this.buildUserSummary(userProfile)}
      
      PRIORIDADE ABSOLUTA: Use PRIMEIRO os cursos da "PROGRAMA√á√ÉO ATUAL" que correspondam √† √°rea ${area}.
      Use cursos gen√©ricos APENAS se n√£o houver cursos atuais adequados para esta √°rea.
      
      IMPORTANTE: Retorne APENAS um JSON v√°lido no seguinte formato:
      {
        "recomendacoes": [
          {
            "nome": "Nome do Curso",
            "area": "√Årea do Curso",
            "justificativa": "Por que este curso √© adequado",
            "beneficios": "Benef√≠cios do curso",
            "oportunidades": "Oportunidades de carreira",
            "programacao_atual": true_ou_false,
            "carga_horaria": "horas_se_disponivel"
          }
        ]
      }
    `;
        const response = await client.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
                { role: "system", content: systemPrompt },
                { role: "user", content: prompt }
            ],
            temperature: 0.3,
            max_tokens: 1000,
        });
        const content = response.choices[0]?.message?.content;
        if (!content) {
            throw new Error("Falha ao recomendar cursos para √°rea espec√≠fica");
        }
        try {
            // Tentar extrair JSON se houver texto extra
            const jsonMatch = content.match(/\{[\s\S]*\}/);
            const jsonContent = jsonMatch ? jsonMatch[0] : content;
            return JSON.parse(jsonContent);
        }
        catch (error) {
            console.error("Erro ao parsear resposta:", content);
            throw new Error("Resposta inv√°lida na recomenda√ß√£o por √°rea");
        }
    }
    /**
     * Cria trilha de aprendizado progressiva
     */
    async createLearningPath(targetArea, currentLevel, userProfile) {
        const systemPrompt = await this.generateSystemPrompt();
        const prompt = `
      Crie uma trilha de aprendizado progressiva na √°rea de ${targetArea}:
      
      N√çVEL ATUAL: ${currentLevel}
      PERFIL: ${this.buildUserSummary(userProfile)}
      
      Crie uma sequ√™ncia l√≥gica de cursos do b√°sico ao avan√ßado.
      Retorne um JSON com:
      {
        "trilha": [
          {
            "etapa": numero,
            "curso": "nome",
            "objetivo": "o_que_aprende",
            "prerequisitos": ["req1", "req2"],
            "proximos_passos": ["prox1", "prox2"]
          }
        ],
        "tempo_total": "estimativa",
        "investimento": "estimativa_custo"
      }
    `;
        const response = await client.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
                { role: "system", content: systemPrompt },
                { role: "user", content: prompt }
            ],
            temperature: 0.3,
            max_tokens: 1500,
        });
        const content = response.choices[0]?.message?.content;
        if (!content) {
            throw new Error("Falha ao criar trilha de aprendizado");
        }
        try {
            return JSON.parse(content);
        }
        catch (error) {
            throw new Error("Resposta inv√°lida na cria√ß√£o da trilha");
        }
    }
    /**
     * Sugere cursos baseados na disponibilidade de tempo
     */
    async recommendByAvailability(availability, userProfile) {
        const currentProgramCourses = await this.loadCurrentProgramCourses();
        const systemPrompt = await this.generateSystemPrompt();
        const prompt = `
      Recomende cursos considerando a disponibilidade: ${availability}
      
      PERFIL: ${this.buildUserSummary(userProfile)}
      
      PRIORIDADE: Use PRIMEIRO os cursos da "PROGRAMA√á√ÉO ATUAL" que se adequem √† disponibilidade.
      
      Considere:
      - Dura√ß√£o dos cursos (carga hor√°ria dos cursos atuais)
      - Hor√°rios dispon√≠veis
      - Modalidade (presencial/EAD)
      - Intensidade do curso
      
      Priorize cursos da programa√ß√£o atual que se adequem √† disponibilidade informada.
      Use cursos gen√©ricos apenas se necess√°rio.
    `;
        const response = await client.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
                { role: "system", content: systemPrompt },
                { role: "user", content: prompt }
            ],
            temperature: 0.4,
            max_tokens: 1200,
        });
        const content = response.choices[0]?.message?.content;
        if (!content) {
            throw new Error("Falha ao recomendar por disponibilidade");
        }
        try {
            return JSON.parse(content);
        }
        catch (error) {
            throw new Error("Resposta inv√°lida na recomenda√ß√£o por disponibilidade");
        }
    }
    buildRecommendationPrompt(vocationalProfile, userRequest) {
        return `
      Recomende trilhas de cursos do Senac Maranh√£o baseadas na an√°lise vocacional:
      
      PERFIL VOCACIONAL:
      ${JSON.stringify(vocationalProfile)}
      
      DADOS DO USU√ÅRIO:
      - Nome: ${userRequest.nome}
      - Idade: ${userRequest.idade}
      - Escolaridade: ${userRequest.escolaridade}
      - √Årea de interesse: ${userRequest.area_interesse}
      - Disponibilidade: ${userRequest.disponibilidade}
      - Habilidades: ${userRequest.habilidades.join(', ')}
      - Personalidade: ${userRequest.personalidade}
      - Objetivos: ${userRequest.objetivos}
      
      INSTRU√á√ïES CR√çTICAS:
      1. SEMPRE PRIORIZE os cursos da "PROGRAMA√á√ÉO ATUAL" (out-nov-dez 2024) - estes est√£o DISPON√çVEIS AGORA
      2. Analise CUIDADOSAMENTE a compatibilidade entre o perfil do usu√°rio e os cursos dispon√≠veis
      3. Se houver cursos da programa√ß√£o atual compat√≠veis, RECOMENDE-OS PRIMEIRO
      4. Use cursos gen√©ricos APENAS se n√£o houver correspond√™ncia na programa√ß√£o atual
      5. SEMPRE marque "programacao_atual": true para cursos da programa√ß√£o atual
      6. SEMPRE marque "programacao_atual": false para cursos gen√©ricos
      7. Seja ESPEC√çFICO sobre por que cada curso √© adequado para o perfil
      8. Considere a √°rea de interesse, habilidades, personalidade e objetivos do usu√°rio
      
      IMPORTANTE: O usu√°rio deve receber recomenda√ß√µes concretas e aplic√°veis. 
      N√£o deixe de recomendar cursos - sempre encontre pelo menos 2-3 op√ß√µes adequadas.
      
      Crie recomenda√ß√µes personalizadas e justificadas para este perfil.
    `;
    }
    buildUserSummary(userProfile) {
        return `
      ${userProfile.nome}, ${userProfile.idade} anos
      Escolaridade: ${userProfile.escolaridade}
      Interesse: ${userProfile.area_interesse}
      Habilidades: ${userProfile.habilidades.join(', ')}
      Personalidade: ${userProfile.personalidade}
      Disponibilidade: ${userProfile.disponibilidade}
      Objetivos: ${userProfile.objetivos}
    `;
    }
    async loadGuidelines() {
        try {
            const guidelinesPath = path.join(process.cwd(), "knowledge", "diretrizes.md");
            return await fs.readFile(guidelinesPath, "utf-8");
        }
        catch (error) {
            console.warn("Arquivo de diretrizes n√£o encontrado");
            return "";
        }
    }
}
export const courseAgent = new CourseAgent();
//# sourceMappingURL=course-agent.js.map