import OpenAI from "openai";
import fs from "fs";
const client = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
    timeout: 2 * 60 * 1000, // 2 minutos
});
/**
 * Agente especializado em an√°lise vocacional
 * Respons√°vel por interpretar respostas e determinar perfil vocacional
 */
export class AnalysisAgent {
    systemPrompt = `
    Voc√™ √© um psic√≥logo vocacional especialista em an√°lise de perfis profissionais.
    Sua fun√ß√£o √© analisar respostas de testes vocacionais e determinar voca√ß√µes.
    
    METODOLOGIA DE AN√ÅLISE:
    1. Identifique padr√µes nas respostas do usu√°rio
    2. Mapeie interesses, habilidades, valores e personalidade
    3. Determine √°reas de maior afinidade profissional
    4. Avalie compatibilidade com diferentes carreiras
    5. Considere fatores como escolaridade, idade e disponibilidade
    
    √ÅREAS PROFISSIONAIS PRINCIPAIS (baseadas nos cursos dispon√≠veis no Senac Maranh√£o):
    - Administra√ß√£o: Assistente Administrativo, Assistente Financeiro
    - Sa√∫de: Atendimento humanizado em servi√ßos de sa√∫de, Cuidador de Idoso, Instrumenta√ß√£o Cir√∫rgica
    - Beleza e Est√©tica: Barbeiro, B√°sico de Depila√ß√£o, Penteados Estilizados, Tend√™ncias em Automaquiagem
    - Moda e Vestu√°rio: Costureiro, Modelagem e Costura Para Iniciantes
    - Fotografia: Introdu√ß√£o √† Fotografia Digital
    - Tecnologia da Informa√ß√£o: Cursos relacionados √† √°rea de TI
    - Gastronomia: Cursos relacionados √† √°rea gastron√¥mica
    - Turismo e Hospitalidade: Cursos relacionados ao setor de turismo
    - Educa√ß√£o: Cursos relacionados √† √°rea educacional
    - Servi√ßos: Cursos relacionados ao setor de servi√ßos
    
    TIPOS DE PERSONALIDADE PROFISSIONAL:
    - Anal√≠tico: Gosta de dados, pesquisa, resolu√ß√£o de problemas
    - Criativo: Busca inova√ß√£o, express√£o art√≠stica, solu√ß√µes originais
    - Comunicativo: Habilidade interpessoal, persuas√£o, relacionamento
    - L√≠der: Capacidade de gest√£o, tomada de decis√£o, coordena√ß√£o
    - Detalhista: Precis√£o, organiza√ß√£o, controle de qualidade
    - Inovador: Pioneirismo, tecnologia, mudan√ßas e transforma√ß√µes
    - Colaborativo: Trabalho em equipe, coopera√ß√£o, harmonia
    - Empreendedor: Iniciativa, risco calculado, oportunidades de neg√≥cio
    
    FORMATO DE RESPOSTA:
    Retorne sempre um JSON v√°lido com a estrutura:
    {
      "perfil_vocacional": {
        "tipo_personalidade": "string",
        "areas_afinidade": ["area1", "area2", "area3"],
        "habilidades_principais": ["hab1", "hab2", "hab3"],
        "valores_profissionais": ["valor1", "valor2", "valor3"],
        "estilo_trabalho": "string"
      },
      "compatibilidade_areas": {
        "administracao": numero_0_a_100,
        "saude": numero_0_a_100,
        "beleza_estetica": numero_0_a_100,
        "moda_vestuario": numero_0_a_100,
        "fotografia": numero_0_a_100,
        "tecnologia_informacao": numero_0_a_100,
        "gastronomia": numero_0_a_100,
        "turismo_hospitalidade": numero_0_a_100,
        "educacao": numero_0_a_100,
        "servicos": numero_0_a_100
      },
      "recomendacoes_carreira": [
        {
          "area": "string",
          "profissoes": ["prof1", "prof2", "prof3"],
          "justificativa": "string",
          "compatibilidade": numero_0_a_100
        }
      ],
      "pontos_fortes": ["ponto1", "ponto2", "ponto3"],
      "areas_desenvolvimento": ["area1", "area2"],
      "confianca_analise": numero_0_a_100
    }
  `;
    /**
     * Analisa o perfil vocacional completo do usu√°rio
     */
    async analyzeVocationalProfile(request) {
        const diretrizes = this.loadGuidelines();
        const userPrompt = this.buildAnalysisPrompt(request);
        const response = await client.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
                { role: "system", content: this.systemPrompt },
                { role: "system", content: `Diretrizes t√©cnicas: ${diretrizes}` },
                { role: "user", content: userPrompt }
            ],
            temperature: 0.3, // Baixa temperatura para an√°lise mais consistente
            max_tokens: 2000,
        });
        const content = response.choices[0]?.message?.content;
        if (!content) {
            throw new Error("Falha ao gerar an√°lise vocacional");
        }
        try {
            // Log da resposta para debug
            console.log('üîç [AnalysisAgent] Resposta da OpenAI:', content);
            // Tentar extrair JSON se estiver dentro de markdown
            let jsonContent = content;
            const jsonMatch = content.match(/```json\n([\s\S]*?)\n```/);
            if (jsonMatch && jsonMatch[1]) {
                jsonContent = jsonMatch[1];
            }
            return JSON.parse(jsonContent);
        }
        catch (error) {
            console.error('‚ùå [AnalysisAgent] Erro ao parsear JSON:', error);
            console.error('üìÑ [AnalysisAgent] Conte√∫do recebido:', content);
            throw new Error("Resposta inv√°lida do agente de an√°lise");
        }
    }
    /**
     * Analisa apenas as respostas do teste para identificar padr√µes
     */
    async analyzeTestResponses(responses) {
        const prompt = `
      Analise apenas as respostas do teste vocacional e identifique padr√µes:
      
      RESPOSTAS: ${JSON.stringify(responses)}
      
      Identifique:
      1. Padr√µes de interesse profissional
      2. Tra√ßos de personalidade dominantes
      3. Prefer√™ncias de ambiente de trabalho
      4. Motiva√ß√µes principais
      5. Estilo de trabalho preferido
      
      Retorne a an√°lise em formato JSON estruturado.
    `;
        const response = await client.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
                { role: "system", content: this.systemPrompt },
                { role: "user", content: prompt }
            ],
            temperature: 0.3,
            max_tokens: 1000,
        });
        const content = response.choices[0]?.message?.content;
        if (!content) {
            throw new Error("Falha ao analisar respostas do teste");
        }
        try {
            return JSON.parse(content);
        }
        catch (error) {
            throw new Error("Resposta inv√°lida na an√°lise de respostas");
        }
    }
    /**
     * Calcula compatibilidade com √°reas espec√≠ficas
     */
    async calculateAreaCompatibility(userProfile, targetAreas) {
        const prompt = `
      Calcule a compatibilidade do usu√°rio com as seguintes √°reas profissionais:
      ${targetAreas.join(', ')}
      
      PERFIL DO USU√ÅRIO:
      ${this.buildProfileSummary(userProfile)}
      
      Retorne um JSON com a compatibilidade (0-100) para cada √°rea:
      {
        "area1": numero,
        "area2": numero,
        ...
      }
    `;
        const response = await client.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
                { role: "system", content: this.systemPrompt },
                { role: "user", content: prompt }
            ],
            temperature: 0.2,
            max_tokens: 500,
        });
        const content = response.choices[0]?.message?.content;
        if (!content) {
            throw new Error("Falha ao calcular compatibilidade");
        }
        try {
            return JSON.parse(content);
        }
        catch (error) {
            throw new Error("Resposta inv√°lida no c√°lculo de compatibilidade");
        }
    }
    /**
     * Identifica pontos fortes e √°reas de desenvolvimento
     */
    async identifyStrengthsAndDevelopment(request) {
        const prompt = `
      Identifique os pontos fortes e √°reas de desenvolvimento do usu√°rio:
      
      ${this.buildProfileSummary(request)}
      
      Retorne um JSON com:
      {
        "pontos_fortes": ["for√ßa1", "for√ßa2", "for√ßa3"],
        "areas_desenvolvimento": ["area1", "area2"],
        "recomendacoes_crescimento": ["rec1", "rec2", "rec3"]
      }
    `;
        const response = await client.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
                { role: "system", content: this.systemPrompt },
                { role: "user", content: prompt }
            ],
            temperature: 0.4,
            max_tokens: 800,
        });
        const content = response.choices[0]?.message?.content;
        if (!content) {
            throw new Error("Falha ao identificar pontos fortes");
        }
        try {
            return JSON.parse(content);
        }
        catch (error) {
            throw new Error("Resposta inv√°lida na identifica√ß√£o de pontos fortes");
        }
    }
    buildAnalysisPrompt(request) {
        return `
      Analise o perfil vocacional completo do usu√°rio e determine sua voca√ß√£o:
      
      DADOS PESSOAIS:
      - Nome: ${request.nome}
      - Idade: ${request.idade}
      - Escolaridade: ${request.escolaridade}
      - √Årea de interesse: ${request.area_interesse}
      - Disponibilidade: ${request.disponibilidade}
      
      PERFIL PROFISSIONAL:
      - Habilidades: ${request.habilidades.join(', ')}
      - Personalidade: ${request.personalidade}
      - Experi√™ncia: ${request.experiencia}
      - Objetivos: ${request.objetivos}
      
      RESPOSTAS DO TESTE:
      ${JSON.stringify(request.respostas_teste)}
      
      Fa√ßa uma an√°lise completa e determine o perfil vocacional ideal.
    `;
    }
    buildProfileSummary(request) {
        return `
      Perfil: ${request.nome}, ${request.idade} anos
      Escolaridade: ${request.escolaridade}
      Interesse: ${request.area_interesse}
      Habilidades: ${request.habilidades.join(', ')}
      Personalidade: ${request.personalidade}
      Experi√™ncia: ${request.experiencia}
      Objetivos: ${request.objetivos}
      Disponibilidade: ${request.disponibilidade}
      Respostas: ${JSON.stringify(request.respostas_teste)}
    `;
    }
    loadGuidelines() {
        try {
            return fs.readFileSync("knowledge/diretrizes.md", "utf-8");
        }
        catch (error) {
            console.warn("Arquivo de diretrizes n√£o encontrado");
            return "";
        }
    }
}
export const analysisAgent = new AnalysisAgent();
//# sourceMappingURL=analysis-agent.js.map